{"version":3,"file":"main.js","mappings":"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","sources":["webpack://http/./src/js/api/createRequest.js","webpack://http/./src/js/api/ChatAPI.js","webpack://http/./src/js/VisualConstructor.js","webpack://http/./src/js/app.js","webpack://http/./src/js/Chat.js"],"sourcesContent":["const createRequest = async (options = {}) => {\n  const url = 'https://ws-server-23j4.onrender.com';\n  // const url = 'http://localhost:3000';\n\n  const response = await fetch(`${url}/${options.handle}`, {\n    method: options.method,\n    body: options.body,\n  });\n\n  const json = await response.json().catch(() => null);\n  return json;\n};\n\nexport default createRequest;\n","import createRequest from './createRequest';\n\nexport default class ChatAPI {\n  static async register(data, callback) {\n    const options = JSON.stringify(data);\n    const handle = 'new-user';\n    const res = await createRequest({ handle, method: 'POST', body: options });\n\n    callback(res);\n  }\n}\n","export default class VisualConstructor {\n  static createDate() {\n    const date = new Date();\n\n    let dateHours = date.getHours();\n    let dateMinutes = date.getMinutes();\n    let dateDay = date.getDate();\n    let dateMonth = date.getMonth() + 1;\n\n    dateHours = (dateHours < 10) ? `0${dateHours}` : dateHours;\n    dateMinutes = (dateMinutes < 10) ? `0${dateMinutes}` : dateMinutes;\n    dateDay = (dateDay < 10) ? `0${dateDay}` : dateDay;\n    dateMonth = (dateMonth < 10) ? `0${dateMonth}` : dateMonth;\n\n    return `${dateHours}:${dateMinutes} ${dateDay}.${dateMonth}.${date.getFullYear()}`;\n  }\n\n  static createUserCard(item) {\n    const container = document.createElement('div');\n    container.classList.add('chat__user');\n    container.dataset.userId = item.id;\n\n    const name = document.createElement('span');\n    name.textContent = item.name;\n\n    container.append(name);\n    return container;\n  }\n\n  static createMessageCard(item) {\n    const container = document.createElement('div');\n    container.classList.add('message__container');\n\n    if (item.yourself) {\n      container.classList.add('message__container-yourself');\n    } else {\n      container.classList.add('message__container-interlocutor');\n    }\n\n    const headerEl = document.createElement('div');\n    headerEl.classList.add('message__header');\n    const headerContentEl = document.createElement('span');\n\n    const date = VisualConstructor.createDate();\n    const headerText = `${item.userName}, ${date}`;\n    headerContentEl.textContent = headerText;\n\n    const message = document.createElement('div');\n    message.textContent = item.message;\n\n    headerEl.append(headerContentEl);\n    container.append(headerEl, message);\n    return container;\n  }\n}\n","import Chat from './Chat';\n\nconst root = document.getElementById('root');\n\nconst app = new Chat(root);\n\napp.init();\n","import ChatAPI from './api/ChatAPI';\nimport VisualConstructor from './VisualConstructor';\n\nexport default class Chat {\n  constructor(container) {\n    this.container = container;\n    this.api = new ChatAPI();\n    this.websocket = null;\n    this.userId = null;\n    this.userName = null;\n\n    this.registerPopup = this.container.querySelector('.register-popup');\n    this.registerError = this.registerPopup.querySelector('.register-error');\n\n    this.chatContainer = this.container.querySelector('.chat-container');\n    this.userList = this.chatContainer.querySelector('.chat__userlist');\n\n    this.messageList = this.container.querySelector('.chat__messages-container');\n  }\n\n  init() {\n    this.subscribeOnEvents();\n    this.registerPopup.showModal();\n  }\n\n  subscribeOnEvents() {\n    this.registerPopup.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      this.registration(e.target);\n\n      e.target.reset();\n    });\n\n    this.chatContainer.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      this.onSendMessage(e.target);\n\n      e.target.reset();\n    });\n\n    window.addEventListener('beforeunload', () => {\n      this.websocket.send(JSON.stringify({ type: 'exit', user: { name: this.userName } }));\n    });\n  }\n\n  registration(formEl) {\n    const formData = new FormData(formEl);\n\n    const name = formData.get('name');\n    const data = { name };\n\n    if (!name) {\n      console.log('Введите имя');\n      return;\n    }\n\n    ChatAPI.register(data, (res) => this.onEnterChatHandler(res));\n  }\n\n  onEnterChatHandler(res) {\n    if (res.status === 'error') {\n      this.registerError.textContent = res.message;\n      return;\n    }\n\n    this.userId = res.user.id;\n    this.userName = res.user.name;\n\n    this.wsInit();\n    this.registerPopup.close();\n  }\n\n  onSendMessage(formEl) {\n    const formData = new FormData(formEl);\n    const message = formData.get('message').trim();\n    if (!message) return;\n\n    const data = {};\n    data.type = 'send';\n    data.userId = this.userId;\n    data.userName = this.userName;\n    data.message = message;\n\n    this.websocket.send(JSON.stringify(data));\n  }\n\n  renderMessage(data) {\n    const message = data;\n\n    if (data.userId === this.userId) {\n      message.userName = 'YOU';\n      message.yourself = true;\n    }\n\n    const messageEl = VisualConstructor.createMessageCard(message);\n    this.messageList.append(messageEl);\n  }\n\n  renderUsers(data) {\n    this.userList.replaceChildren();\n    data.forEach((item) => {\n      const user = item;\n      const iserId = user.id;\n\n      if (iserId === this.userId) {\n        user.name = 'YOU';\n      }\n\n      const userCardEl = VisualConstructor.createUserCard(user);\n      this.userList.append(userCardEl);\n    });\n  }\n\n  wsInit() {\n    this.websocket = new WebSocket('wss://ws-server-23j4.onrender.com/ws');\n    // this.websocket = new WebSocket('ws://localhost:3000/ws');\n\n    this.websocket.addEventListener('open', () => {\n      console.log('ws opened');\n    });\n\n    this.websocket.addEventListener('close', () => {\n      console.log('ws close');\n    });\n\n    this.websocket.addEventListener('message', (e) => {\n      this.onWsMessage(e);\n    });\n\n    this.websocket.addEventListener('error', () => {\n      console.log('ws error');\n    });\n  }\n\n  onWsMessage(e) {\n    const data = JSON.parse(e.data);\n\n    if (data instanceof Array) {\n      this.renderUsers(data);\n    }\n\n    if (data.type === 'send') {\n      this.renderMessage(data);\n    }\n  }\n}\n"],"names":["async","options","response","fetch","handle","method","body","json","catch","ChatAPI","static","data","callback","JSON","stringify","createRequest","VisualConstructor","date","Date","dateHours","getHours","dateMinutes","getMinutes","dateDay","getDate","dateMonth","getMonth","getFullYear","item","container","document","createElement","classList","add","dataset","userId","id","name","textContent","append","yourself","headerEl","headerContentEl","createDate","headerText","userName","message","root","getElementById","constructor","this","api","websocket","registerPopup","querySelector","registerError","chatContainer","userList","messageList","init","subscribeOnEvents","showModal","addEventListener","e","preventDefault","registration","target","reset","onSendMessage","window","send","type","user","formEl","FormData","get","register","res","onEnterChatHandler","console","log","status","wsInit","close","trim","renderMessage","messageEl","createMessageCard","renderUsers","replaceChildren","forEach","userCardEl","createUserCard","WebSocket","onWsMessage","parse","Array"],"sourceRoot":""}